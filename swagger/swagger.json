{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/atributo_ubicacion/": {
            "get": {
                "tags": [
                    "atributo_ubicacion"
                ],
                "description": "get AtributoUbicacion",
                "operationId": "AtributoUbicacionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.AtributoUbicacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "atributo_ubicacion"
                ],
                "description": "create AtributoUbicacion",
                "operationId": "AtributoUbicacionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for AtributoUbicacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AtributoUbicacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.AtributoUbicacion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/atributo_ubicacion/{id}": {
            "get": {
                "tags": [
                    "atributo_ubicacion"
                ],
                "description": "get AtributoUbicacion by id",
                "operationId": "AtributoUbicacionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.AtributoUbicacion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "atributo_ubicacion"
                ],
                "description": "update the AtributoUbicacion",
                "operationId": "AtributoUbicacionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for AtributoUbicacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AtributoUbicacion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.AtributoUbicacion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "atributo_ubicacion"
                ],
                "description": "delete the AtributoUbicacion",
                "operationId": "AtributoUbicacionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/contacto_ente/": {
            "get": {
                "tags": [
                    "contacto_ente"
                ],
                "description": "get ContactoEnte",
                "operationId": "ContactoEnteController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ContactoEnte"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "contacto_ente"
                ],
                "description": "create ContactoEnte",
                "operationId": "ContactoEnteController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ContactoEnte content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ContactoEnte"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ContactoEnte"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/contacto_ente/{id}": {
            "get": {
                "tags": [
                    "contacto_ente"
                ],
                "description": "get ContactoEnte by id",
                "operationId": "ContactoEnteController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ContactoEnte"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "contacto_ente"
                ],
                "description": "update the ContactoEnte",
                "operationId": "ContactoEnteController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ContactoEnte content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ContactoEnte"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ContactoEnte"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "contacto_ente"
                ],
                "description": "delete the ContactoEnte",
                "operationId": "ContactoEnteController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/ente/": {
            "get": {
                "tags": [
                    "ente"
                ],
                "description": "get Ente",
                "operationId": "EnteController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Ente"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "ente"
                ],
                "description": "create Ente",
                "operationId": "EnteController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Ente content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Ente"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Ente"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/ente/{id}": {
            "get": {
                "tags": [
                    "ente"
                ],
                "description": "get Ente by id",
                "operationId": "EnteController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Ente"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "ente"
                ],
                "description": "update the Ente",
                "operationId": "EnteController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Ente content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Ente"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Ente"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ente"
                ],
                "description": "delete the Ente",
                "operationId": "EnteController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/estado_civil/": {
            "get": {
                "tags": [
                    "estado_civil"
                ],
                "description": "get EstadoCivil",
                "operationId": "EstadoCivilController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoCivil"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "estado_civil"
                ],
                "description": "create EstadoCivil",
                "operationId": "EstadoCivilController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for EstadoCivil content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EstadoCivil"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.EstadoCivil"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/estado_civil/{id}": {
            "get": {
                "tags": [
                    "estado_civil"
                ],
                "description": "get EstadoCivil by id",
                "operationId": "EstadoCivilController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoCivil"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "estado_civil"
                ],
                "description": "update the EstadoCivil",
                "operationId": "EstadoCivilController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for EstadoCivil content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EstadoCivil"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoCivil"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "estado_civil"
                ],
                "description": "delete the EstadoCivil",
                "operationId": "EstadoCivilController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/genero/": {
            "get": {
                "tags": [
                    "genero"
                ],
                "description": "get Genero",
                "operationId": "GeneroController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Genero"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "genero"
                ],
                "description": "create Genero",
                "operationId": "GeneroController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Genero content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Genero"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Genero"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/genero/{id}": {
            "get": {
                "tags": [
                    "genero"
                ],
                "description": "get Genero by id",
                "operationId": "GeneroController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Genero"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "genero"
                ],
                "description": "update the Genero",
                "operationId": "GeneroController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Genero content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Genero"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Genero"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "genero"
                ],
                "description": "delete the Genero",
                "operationId": "GeneroController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/grupo_etnico/": {
            "get": {
                "tags": [
                    "grupo_etnico"
                ],
                "description": "get GrupoEtnico",
                "operationId": "GrupoEtnicoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GrupoEtnico"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "grupo_etnico"
                ],
                "description": "create GrupoEtnico",
                "operationId": "GrupoEtnicoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for GrupoEtnico content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GrupoEtnico"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.GrupoEtnico"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/grupo_etnico/{id}": {
            "get": {
                "tags": [
                    "grupo_etnico"
                ],
                "description": "get GrupoEtnico by id",
                "operationId": "GrupoEtnicoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GrupoEtnico"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "grupo_etnico"
                ],
                "description": "update the GrupoEtnico",
                "operationId": "GrupoEtnicoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for GrupoEtnico content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GrupoEtnico"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GrupoEtnico"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "grupo_etnico"
                ],
                "description": "delete the GrupoEtnico",
                "operationId": "GrupoEtnicoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/grupo_sanguineo_persona/": {
            "get": {
                "tags": [
                    "grupo_sanguineo_persona"
                ],
                "description": "get GrupoSanguineoPersona",
                "operationId": "GrupoSanguineoPersonaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GrupoSanguineoPersona"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "grupo_sanguineo_persona"
                ],
                "description": "create GrupoSanguineoPersona",
                "operationId": "GrupoSanguineoPersonaController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for GrupoSanguineoPersona content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GrupoSanguineoPersona"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.GrupoSanguineoPersona"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/grupo_sanguineo_persona/{id}": {
            "get": {
                "tags": [
                    "grupo_sanguineo_persona"
                ],
                "description": "get GrupoSanguineoPersona by id",
                "operationId": "GrupoSanguineoPersonaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GrupoSanguineoPersona"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "grupo_sanguineo_persona"
                ],
                "description": "update the GrupoSanguineoPersona",
                "operationId": "GrupoSanguineoPersonaController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for GrupoSanguineoPersona content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GrupoSanguineoPersona"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GrupoSanguineoPersona"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "grupo_sanguineo_persona"
                ],
                "description": "delete the GrupoSanguineoPersona",
                "operationId": "GrupoSanguineoPersonaController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/identificacion/": {
            "get": {
                "tags": [
                    "identificacion"
                ],
                "description": "get Identificacion",
                "operationId": "IdentificacionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Identificacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "identificacion"
                ],
                "description": "create Identificacion",
                "operationId": "IdentificacionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Identificacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Identificacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Identificacion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/identificacion/{id}": {
            "get": {
                "tags": [
                    "identificacion"
                ],
                "description": "get Identificacion by id",
                "operationId": "IdentificacionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Identificacion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "identificacion"
                ],
                "description": "update the Identificacion",
                "operationId": "IdentificacionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Identificacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Identificacion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Identificacion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "identificacion"
                ],
                "description": "delete the Identificacion",
                "operationId": "IdentificacionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/organizacion/": {
            "get": {
                "tags": [
                    "organizacion"
                ],
                "description": "get Organizacion",
                "operationId": "OrganizacionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Organizacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "organizacion"
                ],
                "description": "create Organizacion",
                "operationId": "OrganizacionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Organizacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Organizacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Organizacion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/organizacion/{id}": {
            "get": {
                "tags": [
                    "organizacion"
                ],
                "description": "get Organizacion by id",
                "operationId": "OrganizacionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Organizacion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "organizacion"
                ],
                "description": "update the Organizacion",
                "operationId": "OrganizacionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Organizacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Organizacion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Organizacion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "organizacion"
                ],
                "description": "delete the Organizacion",
                "operationId": "OrganizacionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/perfil_profesional/": {
            "get": {
                "tags": [
                    "perfil_profesional"
                ],
                "description": "get PerfilProfesional",
                "operationId": "PerfilProfesionalController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PerfilProfesional"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "perfil_profesional"
                ],
                "description": "create PerfilProfesional",
                "operationId": "PerfilProfesionalController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PerfilProfesional content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PerfilProfesional"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.PerfilProfesional"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/perfil_profesional/{id}": {
            "get": {
                "tags": [
                    "perfil_profesional"
                ],
                "description": "get PerfilProfesional by id",
                "operationId": "PerfilProfesionalController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PerfilProfesional"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "perfil_profesional"
                ],
                "description": "update the PerfilProfesional",
                "operationId": "PerfilProfesionalController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PerfilProfesional content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PerfilProfesional"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PerfilProfesional"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "perfil_profesional"
                ],
                "description": "delete the PerfilProfesional",
                "operationId": "PerfilProfesionalController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/persona/": {
            "get": {
                "tags": [
                    "persona"
                ],
                "description": "get Persona",
                "operationId": "PersonaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Persona"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "persona"
                ],
                "description": "create Persona",
                "operationId": "PersonaController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Persona content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Persona"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Persona"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/persona/full/": {
            "get": {
                "tags": [
                    "persona"
                ],
                "description": "get Full information of Persona by id",
                "operationId": "PersonaController.GetFull",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Filter model by id",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userid",
                        "description": "Filter model by usuario",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.interface{}"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            }
        },
        "/persona/{id}": {
            "get": {
                "tags": [
                    "persona"
                ],
                "description": "get Persona by id",
                "operationId": "PersonaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Persona"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "persona"
                ],
                "description": "update the Persona",
                "operationId": "PersonaController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Persona content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Persona"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Persona"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "persona"
                ],
                "description": "delete the Persona",
                "operationId": "PersonaController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/persona_estado_civil/": {
            "get": {
                "tags": [
                    "persona_estado_civil"
                ],
                "description": "get PersonaEstadoCivil",
                "operationId": "PersonaEstadoCivilController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaEstadoCivil"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "persona_estado_civil"
                ],
                "description": "create PersonaEstadoCivil",
                "operationId": "PersonaEstadoCivilController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PersonaEstadoCivil content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PersonaEstadoCivil"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.PersonaEstadoCivil"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/persona_estado_civil/{id}": {
            "get": {
                "tags": [
                    "persona_estado_civil"
                ],
                "description": "get PersonaEstadoCivil by id",
                "operationId": "PersonaEstadoCivilController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaEstadoCivil"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "persona_estado_civil"
                ],
                "description": "update the PersonaEstadoCivil",
                "operationId": "PersonaEstadoCivilController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PersonaEstadoCivil content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PersonaEstadoCivil"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaEstadoCivil"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "persona_estado_civil"
                ],
                "description": "delete the PersonaEstadoCivil",
                "operationId": "PersonaEstadoCivilController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/persona_genero/": {
            "get": {
                "tags": [
                    "persona_genero"
                ],
                "description": "get PersonaGenero",
                "operationId": "PersonaGeneroController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaGenero"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "persona_genero"
                ],
                "description": "create PersonaGenero",
                "operationId": "PersonaGeneroController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PersonaGenero content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PersonaGenero"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.PersonaGenero"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/persona_genero/{id}": {
            "get": {
                "tags": [
                    "persona_genero"
                ],
                "description": "get PersonaGenero by id",
                "operationId": "PersonaGeneroController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaGenero"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "persona_genero"
                ],
                "description": "update the PersonaGenero",
                "operationId": "PersonaGeneroController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PersonaGenero content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PersonaGenero"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaGenero"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "persona_genero"
                ],
                "description": "delete the PersonaGenero",
                "operationId": "PersonaGeneroController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/persona_grupo_etnico/": {
            "get": {
                "tags": [
                    "persona_grupo_etnico"
                ],
                "description": "get PersonaGrupoEtnico",
                "operationId": "PersonaGrupoEtnicoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaGrupoEtnico"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "persona_grupo_etnico"
                ],
                "description": "create PersonaGrupoEtnico",
                "operationId": "PersonaGrupoEtnicoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PersonaGrupoEtnico content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PersonaGrupoEtnico"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.PersonaGrupoEtnico"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/persona_grupo_etnico/{id}": {
            "get": {
                "tags": [
                    "persona_grupo_etnico"
                ],
                "description": "get PersonaGrupoEtnico by id",
                "operationId": "PersonaGrupoEtnicoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaGrupoEtnico"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "persona_grupo_etnico"
                ],
                "description": "update the PersonaGrupoEtnico",
                "operationId": "PersonaGrupoEtnicoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PersonaGrupoEtnico content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PersonaGrupoEtnico"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaGrupoEtnico"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "persona_grupo_etnico"
                ],
                "description": "delete the PersonaGrupoEtnico",
                "operationId": "PersonaGrupoEtnicoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/persona_perfil_profesional/": {
            "get": {
                "tags": [
                    "persona_perfil_profesional"
                ],
                "description": "get PersonaPerfilProfesional",
                "operationId": "PersonaPerfilProfesionalController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaPerfilProfesional"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "persona_perfil_profesional"
                ],
                "description": "create PersonaPerfilProfesional",
                "operationId": "PersonaPerfilProfesionalController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PersonaPerfilProfesional content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PersonaPerfilProfesional"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.PersonaPerfilProfesional"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/persona_perfil_profesional/{id}": {
            "get": {
                "tags": [
                    "persona_perfil_profesional"
                ],
                "description": "get PersonaPerfilProfesional by id",
                "operationId": "PersonaPerfilProfesionalController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaPerfilProfesional"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "persona_perfil_profesional"
                ],
                "description": "update the PersonaPerfilProfesional",
                "operationId": "PersonaPerfilProfesionalController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PersonaPerfilProfesional content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PersonaPerfilProfesional"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaPerfilProfesional"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "persona_perfil_profesional"
                ],
                "description": "delete the PersonaPerfilProfesional",
                "operationId": "PersonaPerfilProfesionalController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/persona_tipo_discapacidad/": {
            "get": {
                "tags": [
                    "persona_tipo_discapacidad"
                ],
                "description": "get PersonaTipoDiscapacidad",
                "operationId": "PersonaTipoDiscapacidadController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaTipoDiscapacidad"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "persona_tipo_discapacidad"
                ],
                "description": "create PersonaTipoDiscapacidad",
                "operationId": "PersonaTipoDiscapacidadController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PersonaTipoDiscapacidad content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PersonaTipoDiscapacidad"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.PersonaTipoDiscapacidad"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/persona_tipo_discapacidad/{id}": {
            "get": {
                "tags": [
                    "persona_tipo_discapacidad"
                ],
                "description": "get PersonaTipoDiscapacidad by id",
                "operationId": "PersonaTipoDiscapacidadController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaTipoDiscapacidad"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "persona_tipo_discapacidad"
                ],
                "description": "update the PersonaTipoDiscapacidad",
                "operationId": "PersonaTipoDiscapacidadController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PersonaTipoDiscapacidad content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PersonaTipoDiscapacidad"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PersonaTipoDiscapacidad"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "persona_tipo_discapacidad"
                ],
                "description": "delete the PersonaTipoDiscapacidad",
                "operationId": "PersonaTipoDiscapacidadController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/relacion_personas/": {
            "get": {
                "tags": [
                    "relacion_personas"
                ],
                "description": "get RelacionPersonas",
                "operationId": "RelacionPersonasController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RelacionPersonas"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "relacion_personas"
                ],
                "description": "create RelacionPersonas",
                "operationId": "RelacionPersonasController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for RelacionPersonas content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RelacionPersonas"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.RelacionPersonas"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/relacion_personas/{id}": {
            "get": {
                "tags": [
                    "relacion_personas"
                ],
                "description": "get RelacionPersonas by id",
                "operationId": "RelacionPersonasController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RelacionPersonas"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "relacion_personas"
                ],
                "description": "update the RelacionPersonas",
                "operationId": "RelacionPersonasController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for RelacionPersonas content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RelacionPersonas"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RelacionPersonas"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "relacion_personas"
                ],
                "description": "delete the RelacionPersonas",
                "operationId": "RelacionPersonasController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_contacto/": {
            "get": {
                "tags": [
                    "tipo_contacto"
                ],
                "description": "get TipoContacto",
                "operationId": "TipoContactoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoContacto"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_contacto"
                ],
                "description": "create TipoContacto",
                "operationId": "TipoContactoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoContacto content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoContacto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoContacto"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_contacto/{id}": {
            "get": {
                "tags": [
                    "tipo_contacto"
                ],
                "description": "get TipoContacto by id",
                "operationId": "TipoContactoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoContacto"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_contacto"
                ],
                "description": "update the TipoContacto",
                "operationId": "TipoContactoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoContacto content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoContacto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoContacto"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_contacto"
                ],
                "description": "delete the TipoContacto",
                "operationId": "TipoContactoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_discapacidad/": {
            "get": {
                "tags": [
                    "tipo_discapacidad"
                ],
                "description": "get TipoDiscapacidad",
                "operationId": "TipoDiscapacidadController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoDiscapacidad"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_discapacidad"
                ],
                "description": "create TipoDiscapacidad",
                "operationId": "TipoDiscapacidadController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoDiscapacidad content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoDiscapacidad"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoDiscapacidad"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_discapacidad/{id}": {
            "get": {
                "tags": [
                    "tipo_discapacidad"
                ],
                "description": "get TipoDiscapacidad by id",
                "operationId": "TipoDiscapacidadController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoDiscapacidad"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_discapacidad"
                ],
                "description": "update the TipoDiscapacidad",
                "operationId": "TipoDiscapacidadController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoDiscapacidad content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoDiscapacidad"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoDiscapacidad"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_discapacidad"
                ],
                "description": "delete the TipoDiscapacidad",
                "operationId": "TipoDiscapacidadController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_ente/": {
            "get": {
                "tags": [
                    "tipo_ente"
                ],
                "description": "get TipoEnte",
                "operationId": "TipoEnteController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoEnte"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_ente"
                ],
                "description": "create TipoEnte",
                "operationId": "TipoEnteController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoEnte content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoEnte"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoEnte"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_ente/{id}": {
            "get": {
                "tags": [
                    "tipo_ente"
                ],
                "description": "get TipoEnte by id",
                "operationId": "TipoEnteController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoEnte"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_ente"
                ],
                "description": "update the TipoEnte",
                "operationId": "TipoEnteController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoEnte content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoEnte"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoEnte"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_ente"
                ],
                "description": "delete the TipoEnte",
                "operationId": "TipoEnteController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_identificacion/": {
            "get": {
                "tags": [
                    "tipo_identificacion"
                ],
                "description": "get TipoIdentificacion",
                "operationId": "TipoIdentificacionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoIdentificacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_identificacion"
                ],
                "description": "create TipoIdentificacion",
                "operationId": "TipoIdentificacionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoIdentificacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoIdentificacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoIdentificacion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_identificacion/{id}": {
            "get": {
                "tags": [
                    "tipo_identificacion"
                ],
                "description": "get TipoIdentificacion by id",
                "operationId": "TipoIdentificacionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoIdentificacion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_identificacion"
                ],
                "description": "update the TipoIdentificacion",
                "operationId": "TipoIdentificacionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoIdentificacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoIdentificacion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoIdentificacion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_identificacion"
                ],
                "description": "delete the TipoIdentificacion",
                "operationId": "TipoIdentificacionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_organizacion/": {
            "get": {
                "tags": [
                    "tipo_organizacion"
                ],
                "description": "get TipoOrganizacion",
                "operationId": "TipoOrganizacionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoOrganizacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_organizacion"
                ],
                "description": "create TipoOrganizacion",
                "operationId": "TipoOrganizacionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoOrganizacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoOrganizacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoOrganizacion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_organizacion/{id}": {
            "get": {
                "tags": [
                    "tipo_organizacion"
                ],
                "description": "get TipoOrganizacion by id",
                "operationId": "TipoOrganizacionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoOrganizacion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_organizacion"
                ],
                "description": "update the TipoOrganizacion",
                "operationId": "TipoOrganizacionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoOrganizacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoOrganizacion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoOrganizacion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_organizacion"
                ],
                "description": "delete the TipoOrganizacion",
                "operationId": "TipoOrganizacionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_relacion_personas/": {
            "get": {
                "tags": [
                    "tipo_relacion_personas"
                ],
                "description": "get TipoRelacionPersonas",
                "operationId": "TipoRelacionPersonasController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoRelacionPersonas"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_relacion_personas"
                ],
                "description": "create TipoRelacionPersonas",
                "operationId": "TipoRelacionPersonasController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoRelacionPersonas content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoRelacionPersonas"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoRelacionPersonas"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_relacion_personas/{id}": {
            "get": {
                "tags": [
                    "tipo_relacion_personas"
                ],
                "description": "get TipoRelacionPersonas by id",
                "operationId": "TipoRelacionPersonasController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoRelacionPersonas"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_relacion_personas"
                ],
                "description": "update the TipoRelacionPersonas",
                "operationId": "TipoRelacionPersonasController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoRelacionPersonas content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoRelacionPersonas"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoRelacionPersonas"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_relacion_personas"
                ],
                "description": "delete the TipoRelacionPersonas",
                "operationId": "TipoRelacionPersonasController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_relacion_ubicacion_ente/": {
            "get": {
                "tags": [
                    "tipo_relacion_ubicacion_ente"
                ],
                "description": "get TipoRelacionUbicacionEnte",
                "operationId": "TipoRelacionUbicacionEnteController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoRelacionUbicacionEnte"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_relacion_ubicacion_ente"
                ],
                "description": "create TipoRelacionUbicacionEnte",
                "operationId": "TipoRelacionUbicacionEnteController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoRelacionUbicacionEnte content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoRelacionUbicacionEnte"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoRelacionUbicacionEnte"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_relacion_ubicacion_ente/{id}": {
            "get": {
                "tags": [
                    "tipo_relacion_ubicacion_ente"
                ],
                "description": "get TipoRelacionUbicacionEnte by id",
                "operationId": "TipoRelacionUbicacionEnteController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoRelacionUbicacionEnte"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_relacion_ubicacion_ente"
                ],
                "description": "update the TipoRelacionUbicacionEnte",
                "operationId": "TipoRelacionUbicacionEnteController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoRelacionUbicacionEnte content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoRelacionUbicacionEnte"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoRelacionUbicacionEnte"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_relacion_ubicacion_ente"
                ],
                "description": "delete the TipoRelacionUbicacionEnte",
                "operationId": "TipoRelacionUbicacionEnteController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/ubicacion_ente/": {
            "get": {
                "tags": [
                    "ubicacion_ente"
                ],
                "description": "get UbicacionEnte",
                "operationId": "UbicacionEnteController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UbicacionEnte"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "ubicacion_ente"
                ],
                "description": "create UbicacionEnte",
                "operationId": "UbicacionEnteController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UbicacionEnte content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UbicacionEnte"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.UbicacionEnte"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/ubicacion_ente/{id}": {
            "get": {
                "tags": [
                    "ubicacion_ente"
                ],
                "description": "get UbicacionEnte by id",
                "operationId": "UbicacionEnteController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UbicacionEnte"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "ubicacion_ente"
                ],
                "description": "update the UbicacionEnte",
                "operationId": "UbicacionEnteController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UbicacionEnte content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UbicacionEnte"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UbicacionEnte"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ubicacion_ente"
                ],
                "description": "delete the UbicacionEnte",
                "operationId": "UbicacionEnteController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/valor_atributo_ubicacion/": {
            "get": {
                "tags": [
                    "valor_atributo_ubicacion"
                ],
                "description": "get ValorAtributoUbicacion",
                "operationId": "ValorAtributoUbicacionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ValorAtributoUbicacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "valor_atributo_ubicacion"
                ],
                "description": "create ValorAtributoUbicacion",
                "operationId": "ValorAtributoUbicacionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ValorAtributoUbicacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ValorAtributoUbicacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ValorAtributoUbicacion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/valor_atributo_ubicacion/{id}": {
            "get": {
                "tags": [
                    "valor_atributo_ubicacion"
                ],
                "description": "get ValorAtributoUbicacion by id",
                "operationId": "ValorAtributoUbicacionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ValorAtributoUbicacion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "valor_atributo_ubicacion"
                ],
                "description": "update the ValorAtributoUbicacion",
                "operationId": "ValorAtributoUbicacionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ValorAtributoUbicacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ValorAtributoUbicacion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ValorAtributoUbicacion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "valor_atributo_ubicacion"
                ],
                "description": "delete the ValorAtributoUbicacion",
                "operationId": "ValorAtributoUbicacionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        ".interface{}": {
            "type": "object"
        },
        "models.AtributoUbicacion": {
            "title": "AtributoUbicacion",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.ContactoEnte": {
            "title": "ContactoEnte",
            "type": "object",
            "properties": {
                "Ente": {
                    "$ref": "#/definitions/models.Ente"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "TipoContacto": {
                    "$ref": "#/definitions/models.TipoContacto"
                },
                "Valor": {
                    "type": "string"
                }
            }
        },
        "models.Ente": {
            "title": "Ente",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "TipoEnte": {
                    "$ref": "#/definitions/models.TipoEnte"
                }
            }
        },
        "models.EstadoCivil": {
            "title": "EstadoCivil",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.Genero": {
            "title": "Genero",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.GrupoEtnico": {
            "title": "GrupoEtnico",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.GrupoSanguineoPersona": {
            "title": "GrupoSanguineoPersona",
            "type": "object",
            "properties": {
                "FactorRh": {
                    "type": "string"
                },
                "GrupoSanguineo": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Persona": {
                    "$ref": "#/definitions/models.Persona"
                }
            }
        },
        "models.Identificacion": {
            "title": "Identificacion",
            "type": "object",
            "properties": {
                "Ente": {
                    "$ref": "#/definitions/models.Ente"
                },
                "FechaExpedicion": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "LugarExpedicion": {
                    "type": "integer",
                    "format": "int64"
                },
                "NumeroIdentificacion": {
                    "type": "string"
                },
                "TipoIdentificacion": {
                    "$ref": "#/definitions/models.TipoIdentificacion"
                }
            }
        },
        "models.Organizacion": {
            "title": "Organizacion",
            "type": "object",
            "properties": {
                "Ente": {
                    "$ref": "#/definitions/models.Ente"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "TipoOrganizacion": {
                    "$ref": "#/definitions/models.TipoOrganizacion"
                }
            }
        },
        "models.PerfilProfesional": {
            "title": "PerfilProfesional",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.Persona": {
            "title": "Persona",
            "type": "object",
            "properties": {
                "Ente": {
                    "type": "integer",
                    "format": "int64"
                },
                "FechaNacimiento": {
                    "type": "string",
                    "format": "string"
                },
                "Foto": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "PrimerApellido": {
                    "type": "string"
                },
                "PrimerNombre": {
                    "type": "string"
                },
                "SegundoApellido": {
                    "type": "string"
                },
                "SegundoNombre": {
                    "type": "string"
                },
                "Usuario": {
                    "type": "string"
                }
            }
        },
        "models.PersonaEstadoCivil": {
            "title": "PersonaEstadoCivil",
            "type": "object",
            "properties": {
                "EstadoCivil": {
                    "$ref": "#/definitions/models.EstadoCivil"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Persona": {
                    "$ref": "#/definitions/models.Persona"
                }
            }
        },
        "models.PersonaGenero": {
            "title": "PersonaGenero",
            "type": "object",
            "properties": {
                "Genero": {
                    "$ref": "#/definitions/models.Genero"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Persona": {
                    "$ref": "#/definitions/models.Persona"
                }
            }
        },
        "models.PersonaGrupoEtnico": {
            "title": "PersonaGrupoEtnico",
            "type": "object",
            "properties": {
                "GrupoEtnico": {
                    "$ref": "#/definitions/models.GrupoEtnico"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Persona": {
                    "$ref": "#/definitions/models.Persona"
                }
            }
        },
        "models.PersonaPerfilProfesional": {
            "title": "PersonaPerfilProfesional",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "PerfilProfesional": {
                    "$ref": "#/definitions/models.PerfilProfesional"
                },
                "Persona": {
                    "$ref": "#/definitions/models.Persona"
                }
            }
        },
        "models.PersonaTipoDiscapacidad": {
            "title": "PersonaTipoDiscapacidad",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Persona": {
                    "$ref": "#/definitions/models.Persona"
                },
                "TipoDiscapacidad": {
                    "$ref": "#/definitions/models.TipoDiscapacidad"
                }
            }
        },
        "models.RelacionPersonas": {
            "title": "RelacionPersonas",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "PersonaPrincipal": {
                    "$ref": "#/definitions/models.Persona"
                },
                "PersonaRelacionada": {
                    "$ref": "#/definitions/models.Persona"
                },
                "TipoRelacionPersonas": {
                    "$ref": "#/definitions/models.TipoRelacionPersonas"
                }
            }
        },
        "models.TipoContacto": {
            "title": "TipoContacto",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.TipoDiscapacidad": {
            "title": "TipoDiscapacidad",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.TipoEnte": {
            "title": "TipoEnte",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.TipoIdentificacion": {
            "title": "TipoIdentificacion",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.TipoOrganizacion": {
            "title": "TipoOrganizacion",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.TipoRelacionPersonas": {
            "title": "TipoRelacionPersonas",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.TipoRelacionUbicacionEnte": {
            "title": "TipoRelacionUbicacionEnte",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.UbicacionEnte": {
            "title": "UbicacionEnte",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "Ente": {
                    "$ref": "#/definitions/models.Ente"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Lugar": {
                    "type": "integer",
                    "format": "int64"
                },
                "TipoRelacionUbicacionEnte": {
                    "$ref": "#/definitions/models.TipoRelacionUbicacionEnte"
                }
            }
        },
        "models.ValorAtributoUbicacion": {
            "title": "ValorAtributoUbicacion",
            "type": "object",
            "properties": {
                "AtributoUbicacion": {
                    "$ref": "#/definitions/models.AtributoUbicacion"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "UbicacionEnte": {
                    "$ref": "#/definitions/models.UbicacionEnte"
                },
                "Valor": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "genero",
            "description": "GeneroController operations for Genero\n"
        },
        {
            "name": "persona_genero",
            "description": "PersonaGeneroController operations for PersonaGenero\n"
        },
        {
            "name": "grupo_etnico",
            "description": "GrupoEtnicoController operations for GrupoEtnico\n"
        },
        {
            "name": "persona_grupo_etnico",
            "description": "PersonaGrupoEtnicoController operations for PersonaGrupoEtnico\n"
        },
        {
            "name": "estado_civil",
            "description": "EstadoCivilController operations for EstadoCivil\n"
        },
        {
            "name": "persona_estado_civil",
            "description": "PersonaEstadoCivilController operations for PersonaEstadoCivil\n"
        },
        {
            "name": "tipo_discapacidad",
            "description": "TipoDiscapacidadController operations for TipoDiscapacidad\n"
        },
        {
            "name": "persona_tipo_discapacidad",
            "description": "PersonaTipoDiscapacidadController operations for PersonaTipoDiscapacidad\n"
        },
        {
            "name": "perfil_profesional",
            "description": "PerfilProfesionalController operations for PerfilProfesional\n"
        },
        {
            "name": "persona_perfil_profesional",
            "description": "PersonaPerfilProfesionalController operations for PersonaPerfilProfesional\n"
        },
        {
            "name": "tipo_relacion_personas",
            "description": "TipoRelacionPersonasController operations for TipoRelacionPersonas\n"
        },
        {
            "name": "persona",
            "description": "PersonaController operations for Persona\n"
        },
        {
            "name": "relacion_personas",
            "description": "RelacionPersonasController operations for RelacionPersonas\n"
        },
        {
            "name": "tipo_ente",
            "description": "TipoEnteController operations for TipoEnte\n"
        },
        {
            "name": "contacto_ente",
            "description": "ContactoEnteController operations for ContactoEnte\n"
        },
        {
            "name": "identificacion",
            "description": "IdentificacionController operations for Identificacion\n"
        },
        {
            "name": "tipo_identificacion",
            "description": "TipoIdentificacionController operations for TipoIdentificacion\n"
        },
        {
            "name": "tipo_contacto",
            "description": "TipoContactoController operations for TipoContacto\n"
        },
        {
            "name": "ente",
            "description": "EnteController operations for Ente\n"
        },
        {
            "name": "organizacion",
            "description": "OrganizacionController operations for Organizacion\n"
        },
        {
            "name": "tipo_organizacion",
            "description": "TipoOrganizacionController operations for TipoOrganizacion\n"
        },
        {
            "name": "ubicacion_ente",
            "description": "UbicacionEnteController operations for UbicacionEnte\n"
        },
        {
            "name": "tipo_relacion_ubicacion_ente",
            "description": "TipoRelacionUbicacionEnteController operations for TipoRelacionUbicacionEnte\n"
        },
        {
            "name": "grupo_sanguineo_persona",
            "description": "GrupoSanguineoPersonaController operations for GrupoSanguineoPersona\n"
        },
        {
            "name": "valor_atributo_ubicacion",
            "description": "ValorAtributoUbicacionController operations for ValorAtributoUbicacion\n"
        },
        {
            "name": "atributo_ubicacion",
            "description": "AtributoUbicacionController operations for AtributoUbicacion\n"
        }
    ]
}